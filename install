#!/usr/bin/env bash

#
# Configuration
#
LINK_FROM=$HOME
LINK_TO=$(pwd)
LINK_MODE=link
SYSNAME=`uname`

PACKAGES=(git-core vim vim-nox tree htop psmisc tmux curl wget apt-file)
PACKAGES+=(colordiff python-setuptools python-pip python3-setuptools)
PACKAGES+=(python3-pip libav-tools)

#
# Helper functions
#
extract_arg_value() {
  echo $1 | sed 's/^[-a-zA-Z0-9]*=//'
}

extract_arg_name() {
  echo $1 | sed -e 's/^\([-a-zA-Z0-9]*\)=.*/\1/'
}

package_installed() {
  dpkg --list | grep "\b$1\b" &> /dev/null
}

command_exists() {
  builtin type -p $1 &> /dev/null
}

#
# Extract arguments
#
for arg in "$@"
do
  case $arg in
    -f=*|--from=*)
      LINK_FROM=$(extract_arg_value $arg)
    ;;

    -m=*|--mode=*)
      LINK_MODE=$(extract_arg_value $arg)
    ;;

    *)
      echo "ERROR: Unable to handle argument: $(extract_arg_name $arg)"
      exit 1
  esac
done

#
# Validate arguments
#
if [ ! -d "$LINK_FROM" ]; then
  echo "ERROR: Invalid link from given. Must be a valid directory."
  exit 1
fi

if [ "$LINK_MODE" != "link" ] && [ "$LINK_MODE" != "copy" ]; then
  echo "ERROR: Invalid link mode given. Must either be 'link' or 'copy'."
  exit 1
fi

#
# Install packages
#

MISSING=()
for PACKAGE in "${PACKAGES[@]}"
do
  if ! package_installed $PACKAGE ; then
    MISSING+=($PACKAGE)
  fi
done

if [ "${#MISSING[@]}" -gt 0 ]; then
  echo ">> Installing missing packages: ${MISSING[@]}"
  sudo apt-get update
  sudo apt-get install --yes ${MISSING[@]}
fi

#
# Install non-apt tools
#
if ! command_exists http ; then
  echo ">> Install HTTPie"
  sudo easy_install httpie
fi

if ! command_exists scdl ; then
  echo ">> Install scdl (Soundcloud Downloader)"
  sudo pip3 install scdl
fi

if ! command_exists youtube-dl ; then
  echo ">> Install youtube-dl (Youtube Downloader)"
  sudo pip install --upgrade youtube-dl
fi

#
# Update git submodules
#
echo ">> Updating all git submodules"
git submodule update --init --recursive

#
# Link all dotfiles from the current directory
#
echo ">> Creating all symlinks"

for dir in $(ls -a1); do
    # Skip "." and ".."
    if [ "${dir}" == "." ] || [ "${dir}" == ".." ]; then
        continue
    fi

    # Skip all "normal" (non hidden) files
    if [ "${dir:0:1}" != "." ]; then
        continue
    fi

    # Skip some git files that are specific to this repository
    if [ "${dir}" == ".git" ] \
    || [ "${dir}" == ".gitmodules" ] \
    || [ "${dir}" == ".gitignore" ] \
    || [ "${dir}" == ".gitattributes" ]; then
        continue
    fi

    if [ "${dir}" == ".dpkg.cfg" ]; then
      if [ -f /etc/os-release ]; then
        OS_ID=`cat /etc/os-release | grep "ID=" | sed "s/ID=//"`
        if [ "${OS_ID}" != "ubuntu" ]; then
          continue;
        fi
      elif [ -f /etc/debian_version ]; then
        continue;
      fi
    fi

    if [ "${dir}" == ".git-prompt" ]; then
      continue;
    fi

    FILE_LINK_FROM="${LINK_FROM}/${dir}"
    FILE_LINK_TO="${LINK_TO}/${dir}"

    rm -rf "${FILE_LINK_FROM}"

    if [ "$LINK_MODE" == "copy" ]; then
      cp -R "${FILE_LINK_FROM}" "${FILE_LINK_TO}"
    else
      ln -s "${FILE_LINK_TO}" "${FILE_LINK_FROM}"
    fi
done

#
# Install vim plugins
#
echo ">> Installing all vim plugins"
vim -e -c BundleInstall -c quitall > /dev/null

#
# Install GNOME settings
#
if command_exists gsettings ; then
  echo ">> Installing GNOME settings"
  ./install-gnome-settings
fi

#
# Install GConf settings
#
if command_exists "gconftool-2" ; then
  echo ">> Installig GConf settings"
  ./install-gconf-settings
fi

#
# Done! :D
#
echo ">> Done"
